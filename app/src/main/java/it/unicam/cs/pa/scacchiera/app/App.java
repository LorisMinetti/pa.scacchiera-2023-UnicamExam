/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.scacchiera.app;


import it.unicam.cs.pa.scacchiera.list.*;
import it.unicam.cs.pa.scacchiera.list.Checkers.Pawn;
import it.unicam.cs.pa.scacchiera.list.pieces.Piece;
import it.unicam.cs.pa.scacchiera.list.player.ComputerPlayer;
import it.unicam.cs.pa.scacchiera.list.player.Player;
import it.unicam.cs.pa.scacchiera.list.util.Colour;

import java.util.Scanner;

import static it.unicam.cs.pa.scacchiera.list.util.Colour.WHITE;

public class App {
    static final int ROW = 8;
    static final int COLUMN = 8;

    public static void main(String[] args) throws Exception {
        Board<Piece, Location> board = new CheckersBoard(ROW,COLUMN);
        Player player1 = new Player("Player 1", Colour.WHITE);
        Player computer = new ComputerPlayer("Computer", Colour.BLACK);
        GameFrame<Piece, Location> first = new CheckersFrame(null, WHITE, board);
        Game game = new CheckersGame(player1, computer, board, first);

        Scanner sc = new Scanner(System.in);

        game.getGameFrame().printBoardFrame();
        //affinchè il gioco non è terminato
        while (!game.isTerminal()){
            System.out.println("Turno di "+game.getGameFrame().getActualTurn());
            System.out.println("----------------------");

            if(game.getGameFrame().getActualTurn() == WHITE){
                requestMoveToUser(sc, game, game.getGameFrame());
            }
            else {
                Move computerMove = computer.play(game.getGameFrame());
                game.move(computerMove);
            }
            askForLocation(sc, game.getGameFrame());
        }
    }

    private static void requestMoveToUser(Scanner sc, Game game, GameFrame<Piece, Location> frame) throws Exception {
        System.out.print("Inserisci la posizione di partenza: ");
        Location startLocation = askForLocation(sc, frame);
        System.out.print("Inserisci la posizione di arrivo: ");
        Location endLocation = askForLocation(sc, frame);
        game.move(new Move(startLocation, endLocation));
    }
    public static Location askForLocation(Scanner sc, GameFrame<Piece, Location> frame) {
        while (true) {
            String input = sc.nextLine();
            // l'input è del tipo "x y"
            String[] parts = input.split(" ");
            int x = Integer.parseInt(parts[0]);
            int y = Integer.parseInt(parts[1]);
            if (x < 1 || x > ROW) {
                System.out.println("Valore di x non valido");
                continue;
            }
            if (y < 1 || y > COLUMN) {
                System.out.println("Valore di y non valido");
                continue;
            }
            //pezzo che voglio muovere
            Piece pawn = new Pawn(frame.getTheBoard().getSchema()[x][y], frame.getActualTurn());
            Colour colour = pawn.getColour();
            //il pezzo che voglio muovere deve essere del colore del giocatore che sta giocando
            if(colour == frame.getActualTurn()){
                return frame.getTheBoard().getSchema()[x][y];
            } else {
                System.out.println("Non puoi muovere questo pezzo");
            }

        }
    }




}
